<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Loan Balance Calculator</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .kakapo-container {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7);
            z-index: 100;
            justify-content: center;
            align-items: center;
        }
        .kakapo {
            width: 250px;
            height: 250px;
            background-image: url('https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExOG85bG80ZHFhdzR1djBqcXI0engzZTZxeWl3NTdzMWRpZjAxcGFsaSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/hTh9bSbUPWMWk/giphy.gif');
            background-size: contain;
            background-repeat: no-repeat;
            background-position: center;
        }
    </style>
</head>
<body class="bg-gray-100 text-gray-800">

    <div class="container mx-auto p-4 sm:p-6 lg:p-8">
        <div class="max-w-4xl mx-auto bg-white rounded-2xl shadow-lg p-6 sm:p-8">
            <header class="text-center mb-6">
                <h1 class="text-3xl sm:text-4xl font-bold text-gray-900">Loan Balance Calculator</h1>
                <p class="text-gray-600 mt-2">Calculate the outstanding loan balance at a specific point in time!</p>
            </header>
            
            <div class="mb-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
                <label for="codeword" class="block text-lg font-medium text-blue-800">Enter Your Class Codeword:</label>
                <div class="mt-1 relative">
                    <input type="password" id="codeword" class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" placeholder="Your attempt will be logged with this codeword">
                    <button id="toggleCodeword" type="button" class="absolute inset-y-0 right-0 px-3 flex items-center text-gray-500 hover:text-gray-700">
                        <svg id="eye-open" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-eye"><path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path><circle cx="12" cy="12" r="3"></circle></svg>
                        <svg id="eye-closed" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-eye-off hidden"><path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"></path><line x1="1" y1="1" x2="23" y2="23"></line></svg>
                    </button>
                </div>
            </div>
            
            <div id="problem-container" class="space-y-6">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div class="bg-gray-50 p-4 rounded-lg">
                        <h3 class="font-semibold text-lg text-gray-700">Loan Amount:</h3>
                        <p id="loan-amount" class="text-2xl font-bold text-indigo-600"></p>
                    </div>
                    <div class="bg-gray-50 p-4 rounded-lg">
                        <h3 class="font-semibold text-lg text-gray-700">Mortgage Structure:</h3>
                        <p id="mortgage-structure" class="text-xl font-bold text-indigo-600"></p>
                    </div>
                    <div class="bg-gray-50 p-4 rounded-lg">
                        <h3 class="font-semibold text-lg text-gray-700">Annual Interest Rate:</h3>
                        <p id="interest-rate" class="text-2xl font-bold text-indigo-600"></p>
                    </div>
                    <div id="balloon-payment-display" class="bg-red-50 border-l-4 border-red-500 p-4 rounded-lg">
                        <h3 class="font-semibold text-lg text-red-800">End-of-Term Balloon Payment:</h3>
                        <p id="balloon-payment-amount" class="text-2xl font-bold text-red-600"></p>
                    </div>
                </div>

                <div class="mt-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
                    <h3 class="font-semibold text-lg text-yellow-800">Calculate Balance At:</h3>
                    <p id="balance-period" class="text-2xl font-bold text-yellow-600"></p>
                </div>

                <div class="mt-6">
                    <label for="student-answer" class="block text-lg font-medium text-gray-700">Your Calculated Outstanding Loan Balance ($):</label>
                    <div class="mt-2 flex flex-col sm:flex-row items-center gap-4">
                        <input type="number" id="student-answer" class="flex-grow w-full px-4 py-2 text-lg border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500" placeholder="Enter your answer">
                        <button id="check-answer" class="w-full sm:w-auto bg-indigo-600 text-white font-bold py-2 px-6 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition duration-150 ease-in-out">Check Answer</button>
                    </div>
                </div>
            </div>
            
            <div id="feedback-container" class="mt-6 p-4 rounded-md text-center hidden">
                <p id="feedback-text" class="text-xl font-bold"></p>
                <div id="hint-text" class="text-md mt-2"></div>
            </div>

            <div class="mt-8 text-center">
                <button id="new-problem" class="bg-green-600 text-white font-bold py-3 px-8 rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition duration-150 ease-in-out hidden">New Loan Problem</button>
            </div>
        </div>
    </div>

    <div id="kakapo-container" class="kakapo-container">
        <div class="kakapo"></div>
    </div>

    <script>
        // PASTE YOUR WEB APP URL HERE AFTER DEPLOYING GOOGLE SCRIPT
        const SCRIPT_URL = "YOUR_GOOGLE_SHEET_WEB_APP_URL"; 

        // --- DOM Element References ---
        const codewordEl = document.getElementById('codeword');
        const toggleCodewordBtn = document.getElementById('toggleCodeword');
        const eyeOpenIcon = document.getElementById('eye-open');
        const eyeClosedIcon = document.getElementById('eye-closed');
        const loanAmountEl = document.getElementById('loan-amount');
        const mortgageStructureEl = document.getElementById('mortgage-structure');
        const interestRateEl = document.getElementById('interest-rate');
        const balloonDisplayEl = document.getElementById('balloon-payment-display');
        const balloonAmountEl = document.getElementById('balloon-payment-amount');
        const balancePeriodEl = document.getElementById('balance-period');
        const studentAnswerEl = document.getElementById('student-answer');
        const checkAnswerBtn = document.getElementById('check-answer');
        const newProblemBtn = document.getElementById('new-problem');
        const feedbackContainer = document.getElementById('feedback-container');
        const feedbackText = document.getElementById('feedback-text');
        const hintText = document.getElementById('hint-text');
        const kakapoContainer = document.getElementById('kakapo-container');

        let state = {
            loanAmount: 0,
            annualRate: 0,
            mortgageType: '',
            loanTermYears: 0,
            endTermBalloon: 0, // This is the value we want to log
            balancePeriodYears: 0, // The period for which the user calculates the balance
            monthlyPayment: 0,
            correctAnswer: 0,
            attempts: 0,
            attempt1: null,
            attempt2: null,
            firstAttemptTimestamp: null // New field for timestamp
        };

        // --- Backend Logging ---
        function logAttemptToSheet(data) {
            if (!SCRIPT_URL || SCRIPT_URL === "YOUR_GOOGLE_SHEET_WEB_APP_URL") {
                console.warn("SCRIPT_URL not set. Data will not be logged.");
                return;
            }
            fetch(SCRIPT_URL, {
                method: 'POST',
                mode: 'no-cors', 
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            }).catch(err => console.error("Error logging data:", err));
        }

        async function fetchInterestRate() {
            try {
                const baseRate = 6.5; const randomFluctuation = (Math.random() * 1.5) - 0.75;
                const rawRate = baseRate + randomFluctuation;
                return (Math.round(rawRate / 0.125) * 0.125).toFixed(3);
            } catch (error) { console.error("Failed to fetch interest rate.", error); return 6.875; }
        }

        async function generateNewProblem() {
            state.loanAmount = Math.round((Math.random() * (1500000 - 200000) + 200000) / 1000) * 1000;
            state.annualRate = await fetchInterestRate();
            
            const amortizationOptions = [
                { type: 'Full', term: 15 }, { type: 'Full', term: 20 }, { type: 'Full', term: 30 },
                { type: 'Partial', term: 15 }, { type: 'Partial', term: 20 }, { type: 'Partial', term: 30 },
                { type: 'Interest Only', term: 15 },
                { type: 'Negative', term: 15 }, { type: 'Negative', term: 20 }, { type: 'Negative', term: 30 }
            ];
            const selectedOption = amortizationOptions[Math.floor(Math.random() * amortizationOptions.length)];
            
            state.mortgageType = selectedOption.type;
            state.loanTermYears = selectedOption.term;
            
            let fvFactor = 0;
            if (selectedOption.type === 'Partial') fvFactor = Math.random() * (0.9 - 0.1) + 0.1; // Random factor for Partial
            if (selectedOption.type === 'Negative') fvFactor = Math.random() * (1.9 - 1.1) + 1.1; // Random factor for Negative

            const paymentCalc = calculatePayment(state.loanAmount, state.annualRate, state.loanTermYears, state.mortgageType, fvFactor);
            state.monthlyPayment = paymentCalc.payment;
            state.endTermBalloon = paymentCalc.fv; // This is the FV at the end of the loan term
            
            // Randomly select a period from 2 to 13 years for balance calculation
            state.balancePeriodYears = Math.floor(Math.random() * (13 - 2 + 1)) + 2;

            // Calculate the correct outstanding balance
            state.correctAnswer = calculateOutstandingBalance(
                state.loanAmount,
                state.monthlyPayment,
                state.annualRate,
                state.loanTermYears,
                state.mortgageType,
                state.endTermBalloon,
                state.balancePeriodYears
            );
            
            resetUIForNewProblem();
            updateProblemDisplay();
        }
        
        // Function to calculate the monthly payment (P&I)
        function calculatePayment(pv, annualRate, termYears, type, fvFactor) {
            const i = annualRate / 100 / 12;
            const n = termYears * 12;
            let fv_signed = 0; // Future value at the end of the loan term

            switch (type) {
                case 'Full': fv_signed = 0; break;
                case 'Partial': fv_signed = -(pv * fvFactor); break;
                case 'Interest Only': fv_signed = -pv; break;
                case 'Negative': fv_signed = -(pv * fvFactor); break;
            }

            let payment = 0;
            if (i === 0) { // Simple interest calculation for 0% rate
                payment = n > 0 ? -(pv + fv_signed) / n : 0;
            } else {
                // Payment formula for compound interest
                // PMT = [ PV* (1 + i)^n + FV ] / [ ((1 + i)^n – 1) / i ]
                const num = pv * Math.pow(1 + i, n) + fv_signed;
                const den = (Math.pow(1 + i, n) - 1) / i;
                payment = den !== 0 ? -num / den : 0;
            }
            return { payment: payment, fv: Math.abs(fv_signed) }; // Return payment and the absolute value of balloon for display
        }

        // Function to calculate outstanding loan balance
        function calculateOutstandingBalance(loanAmount, monthlyPayment, annualRate, loanTermYears, mortgageType, endTermBalloon, currentPeriodYears) {
            const i = annualRate / 100 / 12; // Monthly interest rate
            const n_total = loanTermYears * 12; // Total number of months in loan term
            const n_current = currentPeriodYears * 12; // Months elapsed

            let outstandingBalance = 0;

            if (i === 0) {
                // For 0% interest, balance is original loan minus payments made
                outstandingBalance = loanAmount + (monthlyPayment * n_current);
            } else {
                // PV method (discounting remaining payments and balloon)
                const remainingPayments = n_total - n_current;
                
                if (remainingPayments <= 0) { // If past or at the end of the loan term
                    outstandingBalance = endTermBalloon; // Should be 0 for Full, actual balloon for Partial/Negative
                } else {
                    const pv_remaining_payments = -monthlyPayment * ((1 - Math.pow(1 + i, -remainingPayments)) / i);
                    const pv_balloon = -endTermBalloon / Math.pow(1 + i, remainingPayments);
                    outstandingBalance = pv_remaining_payments + pv_balloon;
                }
            }
            return outstandingBalance;
        }


        function checkAnswer() {
            const studentAnswer = parseFloat(studentAnswerEl.value);
            if (isNaN(studentAnswer)) { showFeedback("Please enter a valid number.", "error"); return; }
            codewordEl.disabled = true;

            state.attempts++;
            if (state.attempts === 1) {
                state.attempt1 = studentAnswer;
                state.firstAttemptTimestamp = new Date().toISOString(); // Record timestamp on first attempt
            }
            if (state.attempts === 2) state.attempt2 = studentAnswer;

            const difference = Math.abs(Math.abs(studentAnswer) - Math.abs(state.correctAnswer));
            const isCorrect = difference <= 2.00;

            if (isCorrect) {
                showFeedback("Correct!", "success"); hintText.innerHTML = ''; lockProblem(); playKakapoAnimation();
            } else {
                if (state.attempts === 1) { showFeedback("Incorrect. Try again!", "error"); provideHint(); } 
                else { showFeedback("Incorrect. Please review inputs. Click 'New Loan Problem' to reset.", "error"); provideHint(true); lockProblem(); }
            }
            
            // Log attempt
            if (isCorrect || state.attempts >= 2) {
                logAttemptToSheet({
                    codeword: codewordEl.value,
                    loanAmount: state.loanAmount,
                    mortgageStructure: state.mortgageType,
                    mortgageTermMonths: state.loanTermYears * 12,
                    endTermBalloon: state.endTermBalloon, // *** NEW: Include balloon payment here ***
                    interestRateAnnual: state.annualRate,
                    futurePeriodYears: state.balancePeriodYears,
                    correctAnswer: state.correctAnswer,
                    studentAttempt1: state.attempt1,
                    firstAttemptTimestamp: state.firstAttemptTimestamp, // Include timestamp
                    studentAttempt2: state.attempt2,
                    wasCorrectFinal: isCorrect
                });
            }
        }
        
        function provideHint(discloseAll = false) {
            const i = state.annualRate / 100 / 12;
            const n_total_months = state.loanTermYears * 12;
            const n_balance_months = state.balancePeriodYears * 12;
            const remainingPayments = n_total_months - n_balance_months;
            const monthlyPmt = state.monthlyPayment;
            const loanPv = state.loanAmount;
            const endFv = state.endTermBalloon;

            let hints = [];

            // Hint for PV method inputs
            hints.push({ method: 'PV Method (Balance)', name: 'Remaining N (months)', value: remainingPayments });
            hints.push({ method: 'PV Method (Balance)', name: 'I/Y (monthly)', value: (i * 100).toFixed(4) });
            hints.push({ method: 'PV Method (Balance)', name: 'PMT (monthly)', value: monthlyPmt.toFixed(2) });
            if (endFv > 0 || state.mortgageType === 'Interest Only') {
                 hints.push({ method: 'PV Method (Balance)', name: 'FV (end of term)', value: endFv.toFixed(2) });
            }
            
            // Hint for FV method (to calculate balance as FV of initial loan - FV of payments)
            hints.push({ method: 'FV Method (Original Loan)', name: 'N for loan (months)', value: n_balance_months });
            hints.push({ method: 'FV Method (Original Loan)', name: 'I/Y (monthly)', value: (i * 100).toFixed(4) });
            hints.push({ method: 'FV Method (Original Loan)', name: 'PMT (monthly)', value: monthlyPmt.toFixed(2) });
            hints.push({ method: 'FV Method (Original Loan)', name: 'PV for loan', value: loanPv.toFixed(2) });


            if (discloseAll) {
                let hintHtml = `<div class="text-left w-full max-w-lg mx-auto mt-4 p-4 bg-gray-50 rounded-lg">
                                    <p class="font-bold text-gray-800 mb-2">Calculator Inputs (using PV method for Balance):</p>
                                    <div class="grid grid-cols-2 gap-x-4 gap-y-2">
                                        <div class="font-semibold text-gray-700">N (remaining):</div><div class="font-mono text-gray-900">${remainingPayments}</div>
                                        <div class="font-semibold text-gray-700">I/Y (monthly):</div><div class="font-mono text-gray-900">${(i * 100).toFixed(4)}%</div>
                                        <div class="font-semibold text-gray-700">PMT:</div><div class="font-mono text-gray-900">$${Math.abs(monthlyPmt).toFixed(2)}</div>`;
                                        if (endFv > 0 || state.mortgageType === 'Interest Only') {
                                            hintHtml += `<div class="font-semibold text-gray-700">FV (at term end):</div><div class="font-mono text-gray-900">$${endFv.toFixed(2)}</div>`;
                                        }
                                hintHtml += `</div>
                                <p class="font-bold text-gray-800 mb-2 mt-4">Also consider for original loan calculation:</p>
                                <div class="grid grid-cols-2 gap-x-4 gap-y-2">
                                <div class="font-semibold text-gray-700">Original Loan PV:</div><div class="font-mono text-gray-900">$${loanPv.toFixed(2)}</div>
                                <div class="font-semibold text-gray-700">Months elapsed (N):</div><div class="font-mono text-gray-900">${n_balance_months}</div>
                                </div>
                                </div>`;
                hintText.innerHTML = hintHtml;
            } else {
                // Remove hints already given
                let availableHints = hints;
                if (state.attempts === 1 && state.lastHint) {
                    availableHints = hints.filter(h => h.name !== state.lastHint.name);
                }
                
                if (availableHints.length === 0) availableHints = hints; // Reset if no new hints left

                const randomHint = availableHints[Math.floor(Math.random() * availableHints.length)];
                state.lastHint = randomHint; // Store the last hint given

                let hintMessage = `<span>Hint: Check your value for ${randomHint.name} (${randomHint.method}). The correct value is ${randomHint.value}.</span>`;
                hintText.innerHTML = hintMessage;
            }
        }

        function updateProblemDisplay() {
            loanAmountEl.textContent = `$${state.loanAmount.toLocaleString()}`;
            mortgageStructureEl.textContent = `${state.loanTermYears}-Year, ${state.mortgageType} Amortization`;
            interestRateEl.textContent = `${state.annualRate}%`;
            balancePeriodEl.textContent = `${state.balancePeriodYears} Years`;

            if (state.mortgageType === 'Partial' || state.mortgageType === 'Negative' || state.mortgageType === 'Interest Only') {
                balloonAmountEl.textContent = `$${state.endTermBalloon.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
                balloonDisplayEl.classList.remove('hidden');
            } else {
                balloonDisplayEl.classList.add('hidden');
            }
        }

        function resetUIForNewProblem() {
            state.attempts = 0;
            state.attempt1 = null;
            state.attempt2 = null;
            state.firstAttemptTimestamp = null; // Reset timestamp
            state.lastHint = null; // Reset last hint
            studentAnswerEl.value = '';
            studentAnswerEl.disabled = false;
            checkAnswerBtn.disabled = false;
            checkAnswerBtn.classList.remove('bg-gray-400', 'cursor-not-allowed');
            checkAnswerBtn.classList.add('bg-indigo-600', 'hover:bg-indigo-700');
            newProblemBtn.classList.add('hidden');
            feedbackContainer.classList.add('hidden');
            hintText.innerHTML = '';
            codewordEl.disabled = false;
        }

        function lockProblem() {
            studentAnswerEl.disabled = true;
            checkAnswerBtn.disabled = true;
            checkAnswerBtn.classList.add('bg-gray-400', 'cursor-not-allowed');
            checkAnswerBtn.classList.remove('bg-indigo-600', 'hover:bg-indigo-700');
            newProblemBtn.classList.remove('hidden');
        }

        function showFeedback(message, type) {
            feedbackText.textContent = message;
            feedbackContainer.classList.remove('hidden', 'bg-green-100', 'text-green-700', 'bg-red-100', 'text-red-700');
            if (type === 'success') {
                feedbackContainer.classList.add('bg-green-100', 'text-green-700');
            } else {
                feedbackContainer.classList.add('bg-red-100', 'text-red-700');
            }
        }
        
        function playKakapoAnimation() {
            kakapoContainer.style.display = 'flex';
            setTimeout(() => {
                kakapoContainer.style.display = 'none';
            }, 4000);
        }

        // Event Listeners
        toggleCodewordBtn.addEventListener('click', () => {
            const isPassword = codewordEl.type === 'password';
            codewordEl.type = isPassword ? 'text' : 'password';
            eyeOpenIcon.classList.toggle('hidden', !isPassword);
            eyeClosedIcon.classList.toggle('hidden', isPassword);
        });

        checkAnswerBtn.addEventListener('click', checkAnswer);
        newProblemBtn.addEventListener('click', generateNewProblem);
        studentAnswerEl.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') checkAnswer();
        });
        window.onload = () => { generateNewProblem(); };
    </script>
</body>
</html>
